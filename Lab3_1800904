{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":104086,"sourceType":"datasetVersion","datasetId":54526}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Step 1: Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:19:09.213828Z","iopub.execute_input":"2024-10-21T17:19:09.214226Z","iopub.status.idle":"2024-10-21T17:19:12.363688Z","shell.execute_reply.started":"2024-10-21T17:19:09.214188Z","shell.execute_reply":"2024-10-21T17:19:12.362501Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# Step 2: Load the dataset\ndata = pd.read_csv('/kaggle/input/dwdm-week-3/Creditcardprom.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:20:03.878969Z","iopub.execute_input":"2024-10-21T17:20:03.879413Z","iopub.status.idle":"2024-10-21T17:20:03.887750Z","shell.execute_reply.started":"2024-10-21T17:20:03.879373Z","shell.execute_reply":"2024-10-21T17:20:03.886607Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Step 3: Explore the dataset\nprint(data.info())  # To check the structure of the dataset\nprint(data.head())  # To see the first few rows","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:21:19.111759Z","iopub.execute_input":"2024-10-21T17:21:19.112180Z","iopub.status.idle":"2024-10-21T17:21:19.155451Z","shell.execute_reply.started":"2024-10-21T17:21:19.112143Z","shell.execute_reply":"2024-10-21T17:21:19.154368Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 15 entries, 0 to 14\nData columns (total 7 columns):\n #   Column            Non-Null Count  Dtype \n---  ------            --------------  ----- \n 0   Income Range      15 non-null     object\n 1   Magazine Promo    15 non-null     object\n 2   Watch Promo       15 non-null     object\n 3   Life Ins Promo    15 non-null     object\n 4   Credit Card Ins.  15 non-null     object\n 5   Sex               15 non-null     object\n 6   Age               15 non-null     int64 \ndtypes: int64(1), object(6)\nmemory usage: 968.0+ bytes\nNone\n  Income Range Magazine Promo Watch Promo Life Ins Promo Credit Card Ins.  \\\n0    40-50,000            Yes          No             No               No   \n1    30-40,000            Yes         Yes            Yes               No   \n2    40-50,000             No          No             No               No   \n3    30-40,000            Yes         Yes            Yes              Yes   \n4    50-60,000            Yes          No            Yes               No   \n\n      Sex  Age  \n0    Male   45  \n1  Female   40  \n2    Male   42  \n3    Male   43  \n4  Female   38  \n","output_type":"stream"}]},{"cell_type":"code","source":"# Step 4: Convert categorical data to numeric using label encoding or one-hot encoding\n# You can use pandas' 'pd.get_dummies()' or sklearn's 'LabelEncoder'\n# We will use pd.get_dummies for simplicity (one-hot encoding)\n\ndata_encoded = pd.get_dummies(data, columns=['Income Range', 'Magazine Promo', 'Watch Promo', 'Life Ins Promo', 'Credit Card Ins.', 'Sex'])\n\n# Step 5: Display the encoded data\nprint(data_encoded.head())\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:24:18.879016Z","iopub.execute_input":"2024-10-21T17:24:18.879919Z","iopub.status.idle":"2024-10-21T17:24:18.904052Z","shell.execute_reply.started":"2024-10-21T17:24:18.879872Z","shell.execute_reply":"2024-10-21T17:24:18.902921Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"   Age  Income Range_20-30,000  Income Range_30-40,000  \\\n2   42                   False                   False   \n3   43                   False                    True   \n4   38                   False                   False   \n5   55                    True                   False   \n6   35                   False                    True   \n\n   Income Range_40-50,000  Income Range_50-60,000  Magazine Promo_No  \\\n2                    True                   False               True   \n3                   False                   False              False   \n4                   False                    True              False   \n5                   False                   False               True   \n6                   False                   False              False   \n\n   Magazine Promo_Yes  Watch Promo_No  Watch Promo_Yes  Life Ins Promo_No  \\\n2               False            True            False               True   \n3                True           False             True              False   \n4                True            True            False              False   \n5               False            True            False               True   \n6                True            True            False              False   \n\n   Life Ins Promo_Yes  Credit Card Ins._No  Credit Card Ins._Yes  Sex_Female  \\\n2               False                 True                 False       False   \n3                True                False                  True       False   \n4                True                 True                 False        True   \n5               False                 True                 False        True   \n6                True                False                  True       False   \n\n   Sex_Male  \n2      True  \n3      True  \n4     False  \n5     False  \n6      True  \n","output_type":"stream"}]},{"cell_type":"code","source":"# Step 6: Define X (features) and Y (target)\n# We'll predict 'Life Ins Promo_Yes' (the column indicating if the promo was accepted)\nX = data_encoded.drop('Life Ins Promo_Yes', axis=1)  # Features\nY = data_encoded['Life Ins Promo_Yes']  # Target","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:26:13.031482Z","iopub.execute_input":"2024-10-21T17:26:13.032412Z","iopub.status.idle":"2024-10-21T17:26:13.038400Z","shell.execute_reply.started":"2024-10-21T17:26:13.032371Z","shell.execute_reply":"2024-10-21T17:26:13.037109Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Step 7: Split the data into train and test sets (70/30 split)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:26:27.869795Z","iopub.execute_input":"2024-10-21T17:26:27.870766Z","iopub.status.idle":"2024-10-21T17:26:27.884173Z","shell.execute_reply.started":"2024-10-21T17:26:27.870717Z","shell.execute_reply":"2024-10-21T17:26:27.883068Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Step 8: Train a Decision Tree Classifier\nclf = DecisionTreeClassifier(criterion='entropy', max_depth=5)\nclf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:26:49.943842Z","iopub.execute_input":"2024-10-21T17:26:49.944314Z","iopub.status.idle":"2024-10-21T17:26:49.964437Z","shell.execute_reply.started":"2024-10-21T17:26:49.944241Z","shell.execute_reply":"2024-10-21T17:26:49.963159Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier(criterion='entropy', max_depth=5)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=5)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"# Step 9: Evaluate the model\nprint(f\"Training accuracy: {clf.score(X_train, y_train)}\")\nprint(f\"Test accuracy: {clf.score(X_test, y_test)}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:27:34.357554Z","iopub.execute_input":"2024-10-21T17:27:34.358008Z","iopub.status.idle":"2024-10-21T17:27:34.373105Z","shell.execute_reply.started":"2024-10-21T17:27:34.357970Z","shell.execute_reply":"2024-10-21T17:27:34.371999Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Training accuracy: 1.0\nTest accuracy: 1.0\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report\n\n# Step 10: Confusion Matrix\ny_pred = clf.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\n\nprint(\"Confusion Matrix:\")\nprint(cm)\n\n# Step 11: Classification Report\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:37:43.730426Z","iopub.execute_input":"2024-10-21T17:37:43.730922Z","iopub.status.idle":"2024-10-21T17:37:43.763423Z","shell.execute_reply.started":"2024-10-21T17:37:43.730879Z","shell.execute_reply":"2024-10-21T17:37:43.762101Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[2 0]\n [0 2]]\n\nClassification Report:\n              precision    recall  f1-score   support\n\n       False       1.00      1.00      1.00         2\n        True       1.00      1.00      1.00         2\n\n    accuracy                           1.00         4\n   macro avg       1.00      1.00      1.00         4\nweighted avg       1.00      1.00      1.00         4\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Step 12: lowering the max depth to prevent overfitting\nclf = DecisionTreeClassifier(criterion='entropy', max_depth=3)\nclf.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:39:22.930170Z","iopub.execute_input":"2024-10-21T17:39:22.930684Z","iopub.status.idle":"2024-10-21T17:39:22.944093Z","shell.execute_reply.started":"2024-10-21T17:39:22.930640Z","shell.execute_reply":"2024-10-21T17:39:22.942922Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier(criterion='entropy', max_depth=3)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(clf, X, Y, cv=5)  # 5-fold cross-validation\nprint(f\"Cross-validation scores: {scores}\")\nprint(f\"Mean cross-validation score: {scores.mean()}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:40:17.208421Z","iopub.execute_input":"2024-10-21T17:40:17.208901Z","iopub.status.idle":"2024-10-21T17:40:17.256986Z","shell.execute_reply.started":"2024-10-21T17:40:17.208858Z","shell.execute_reply":"2024-10-21T17:40:17.255831Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Cross-validation scores: [1. 1. 1. 1. 1.]\nMean cross-validation score: 1.0\n","output_type":"stream"}]},{"cell_type":"code","source":"# Structure of data\nstr(my.data)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T17:44:36.037380Z","iopub.execute_input":"2024-10-21T17:44:36.037880Z","iopub.status.idle":"2024-10-21T17:44:36.072063Z","shell.execute_reply.started":"2024-10-21T17:44:36.037839Z","shell.execute_reply":"2024-10-21T17:44:36.070626Z"},"trusted":true},"execution_count":19,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[19], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Structure of data\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mstr\u001b[39m(\u001b[43mmy\u001b[49m\u001b[38;5;241m.\u001b[39mdata)\n","\u001b[0;31mNameError\u001b[0m: name 'my' is not defined"],"ename":"NameError","evalue":"name 'my' is not defined","output_type":"error"}]}]}